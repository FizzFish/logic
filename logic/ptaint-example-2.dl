#include "../logic/ptaint.dl"

.init ptaint = PTaint

.decl EntryMethod(method:Method)

EntryMethod("<org.apache.commons.text.StringSubstitutor: java.lang.String replace(java.lang.String)>").


ptaint.Reachable(method) :-
    EntryMethod(method).

NormalHeap(heap, class),
ptaint.VarPointsTo(heap, this) :-
    ThisVar(method, this),
    EntryMethod(method),
    VarType(this, class),
    heap = cat("Mock::", class).

ptaint.TaintHeap(taintHeap, class),
ptaint.VarPointsTo(taintHeap, param) :-
    EntryMethod(method),
    FormalParam(_, method, param),
    VarType(param, class),
    taintHeap = cat("NewTainted::", "Init::Param").


ptaint.SourceMethod("<com.bytecodedl.benchmark.demo.TaintDemo3: java.lang.String Source()>").
ptaint.SinkMethod("<javax.script.ScriptEngine: java.lang.Object eval(java.lang.String)>", 0).

ptaint.BaseToRetTransfer("<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>").
ptaint.BaseToRetTransfer("<java.lang.StringBuilder: java.lang.String toString()>").

ptaint.BaseToArgTransfer("<java.lang.String: void getChars(int,int,char[],int)>", 2).

ptaint.ArgToRetTransfer("<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>", 0).
ptaint.ArgToBaseTransfer("<java.lang.String: void <init>(char[],int,int)>", 0).

ptaint.SanitizeMethod("<com.bytecodedl.benchmark.demo.TaintDemo3: java.lang.String Sanitize(java.lang.String)>").


.decl TaintVar(var:Var, heap:Heap)

TaintVar(var, heap) :-
    ptaint.VarPointsTo(heap, var),
    ptaint.TaintHeap(heap, _).

.output TaintVar
.output ptaint.TaintTransfer
.output ptaint.IsTaintedFrom
.output ptaint.InstanceFieldPointsTo
.output ptaint.OVCallGraph

.output ptaint.TaintHeap
.output ptaint.VarPointsTo