#pragma once
#include "pt-noctx.dl"

.comp PTaint : ContextInsensitivePt{

    .decl TaintHeap(insn:Insn, heap:Heap)
    .decl SourceMethod(method:Method)
    .decl SinkMethod(method:Method, n:number)

    .decl SanitizeMethod(method:Method)

    .decl BaseToRetTransfer(method:Method)
    .decl ArgToRetTransfer(method:Method, n:number)
    .decl IsTaintedFrom(insn:Insn, from:Var, to:Var)
    //.decl TransferTaint(heap:Heap, newHeap:Heap)
    .decl SinkInsn(heap:Heap, insn:Insn)

    // sink
    SinkInsn(heap, insn) :-
        SinkMethod(method, n),
        ActualParam(n, insn, arg),
        (
            CallGraph(insn,_,method);
            OVCallGraph(insn,_,method)
        ),
        VarPointsTo(heap, arg),
        TaintHeap(_, heap).

    // taint arg to param
    VarPointsTo(heap, param) :-
        CallGraph(insn, _, callee),
        ActualParam(n, insn, arg),
        FormalParam(n, callee, param),
        VarPointsTo(heap, arg),
        TaintHeap(_, heap),
        !SanitizeMethod(callee).
    
    
    TaintHeap(insn, heap),
    VarPointsTo(heap, to) :-
        SourceMethod(callee),
        CallGraph(insn, _, callee),
        AssignReturnValue(insn, to),
        heap = cat("NewTainted::", insn).

    IsTaintedFrom(insn, base, ret) :-
        (
            CallGraph(insn, _, callee);
            OVCallGraph(insn, _, callee)
        ),
        BaseToRetTransfer(callee),
        (
            VirtualMethodInvocation(insn, _, _, base, _);
            SpecialMethodInvocation(insn, _, _, base, _)
        ),
        AssignReturnValue(insn, ret).
    
    IsTaintedFrom(insn, arg, ret) :-
        (
            CallGraph(insn, _, callee);
            OVCallGraph(insn, _, callee)
        ),
        ArgToRetTransfer(callee, n),
        ActualParam(n, insn, arg),
        AssignReturnValue(insn, ret).

    TaintHeap(insn, newHeap),
    VarPointsTo(newHeap, to) :-
        IsTaintedFrom(insn, from, to),
        VarPointsTo(heap, from),
        TaintHeap(_, heap),
        newHeap = cat("TransferTaint::", insn).
}