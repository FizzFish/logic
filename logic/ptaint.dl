#pragma once
#include "pt-noctx.dl"

.comp PTaint : ContextInsensitivePt{

    .decl TaintHeap(heap:Heap, class:Class)
    .decl SourceMethod(method:Method)
    .decl SinkMethod(method:Method, n:number)
    .decl TaintTransfer(caller:Method, callee:Method)

    .decl SanitizeMethod(method:Method)

    .decl BaseToRetTransfer(method:Method)
    .decl ArgToRetTransfer(method:Method, n:number)
    .decl BaseToArgTransfer(method:Method, n:number)
    .decl ArgToBaseTransfer(method:Method, n:number)
    .decl IsTaintedFrom(insn:Insn, from:Var, to:Var)
    //.decl TransferTaint(heap:Heap, newHeap:Heap)
    .decl SinkInsn(heap:Heap, insn:Insn)

    // sink
    SinkInsn(heap, insn) :-
        SinkMethod(method, n),
        ActualParam(n, insn, arg),
        (
            CallGraph(insn,_,method);
            OVCallGraph(insn,_,method)
        ),
        VarPointsTo(heap, arg),
        TaintHeap(heap, _).

    // taint arg to param
    TaintTransfer(caller, callee),
    VarPointsTo(heap, param) :-
        CallGraph(insn, caller, callee),
        ActualParam(n, insn, arg),
        FormalParam(n, callee, param),
        VarPointsTo(heap, arg),
        TaintHeap(heap, _),
        !SanitizeMethod(callee).
    
    
    TaintHeap(heap, class),
    VarPointsTo(heap, to) :-
        SourceMethod(callee),
        CallGraph(insn, _, callee),
        AssignReturnValue(insn, to),
        VarType(to, class),
        heap = cat("NewTainted::", insn).

    IsTaintedFrom(insn, base, ret) :-
        (
            CallGraph(insn, _, callee);
            OVCallGraph(insn, _, callee)
        ),
        BaseToRetTransfer(callee),
        (
            VirtualMethodInvocation(insn, _, _, base, _);
            SpecialMethodInvocation(insn, _, _, base, _)
        ),
        AssignReturnValue(insn, ret).

    IsTaintedFrom(insn, base, arg) :-
        (
            CallGraph(insn, _, callee);
            OVCallGraph(insn, _, callee)
        ),
        BaseToArgTransfer(callee, n),
        ActualParam(n, insn, arg),
        (
            VirtualMethodInvocation(insn, _, _, base, _);
            SpecialMethodInvocation(insn, _, _, base, _)
        ).

    IsTaintedFrom(insn, arg, base) :-
        (
            CallGraph(insn, _, callee);
            OVCallGraph(insn, _, callee)
        ),
        ArgToBaseTransfer(callee, n),
        ActualParam(n, insn, arg),
        (
            VirtualMethodInvocation(insn, _, _, base, _);
            SpecialMethodInvocation(insn, _, _, base, _)
        ).

    IsTaintedFrom(insn, arg, ret) :-
        (
            CallGraph(insn, _, callee);
            OVCallGraph(insn, _, callee)
        ),
        ArgToRetTransfer(callee, n),
        ActualParam(n, insn, arg),
        AssignReturnValue(insn, ret).
    /**
    TaintHeap(newHeap, class),
    VarPointsTo(newHeap, to) :-
        IsTaintedFrom(insn, from, to),
        VarPointsTo(heap, from),
        TaintHeap(heap, _),
        VarType(to, class),
        newHeap = cat("TransferTaint::", insn).
    */
    /**
    存在一个问题：
    1. x = new();y=x;taint(y) 这时显然不应该污染x
    2. this.buf = new();stack=this.buf;taint(stack) 这时需要污染this.buf，只是因为中间语言写成了两个变量
    */
    TaintHeap(newHeap, class),
    VarPointsTo(newHeap, var) :-
        IsTaintedFrom(insn, from, to),
        VarPointsTo(heap, from),
        TaintHeap(heap, _),
        VarType(to, class),
        newHeap = cat("TransferTaint::", insn),
        VarPointsTo(oldHeap, to),
        AssignHeapAllocation(_, _, oldHeap, var, _, _).
}